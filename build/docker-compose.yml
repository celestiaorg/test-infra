version: '3.7'

services:
  grafana:
    image: grafana/grafana:9.2.4
    ports:
      - 3000:3000
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - 9000:9090
    volumes:
      - ${PWD}/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml

  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector
    command: ["--config=/root/otel-collector/config.yml"]
    volumes:
      - ${PWD}/otel-collector:/root/otel-collector/
    ports:
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "55681:55681"
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver

#  nodelogger:
#    image: mojiz/nodelogger:latest
#    container_name: nodelogger
#    depends_on:
#      - postgres
#    ports:
#      - 2348:2345
#      - ${NODELOGGER_REST_API_PORT}:${NODELOGGER_REST_API_PORT}
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "200k"
#        max-file: "10"
#    volumes:
#      - ./nodelogger:/go/src/app  # We need it for development
#    environment:
#      LOG_LEVEL: ${NODELOGGER_LOG_LEVEL}
#      PROMETHEUS_URL: ${PROMETHEUS_URL}
#      PROMETHEUS_SYNC_INTERVAL: ${NODELOGGER_PROMETHEUS_SYNC_INTERVAL}
#      API_ROWS_PER_PAGE: ${NODELOGGER_API_ROWS_PER_PAGE}
#      REST_API_ADDRESS: ${NODELOGGER_REST_API_ADDRESS}
#      DEMO: ${NODELOGGER_DEMO:-true}
#      ORIGIN_ALLOWED: ${NODELOGGER_ORIGIN_ALLOWED}
#      POSTGRES_DB: ${POSTGRES_DB:-tmp}
#      POSTGRES_USER: ${POSTGRES_USER:-root}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
#      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
#      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
#    healthcheck:
#      test: curl --fail http://nodelogger:${NODELOGGER_REST_API_PORT}/ || exit 1
#      interval: 30s
#      retries: 10 # Will try for 5 minutes
#    restart: always
#    security_opt:
#      - "seccomp:unconfined"
#
#
#  postgres:
#    container_name: postgres
#    image: postgres:latest
#    environment:
#      POSTGRES_DB: ${POSTGRES_DB:-tmp}
#      POSTGRES_USER: ${POSTGRES_USER:-root}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
#      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
#      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
#    volumes:
#      - postgres-db:/var/lib/postgresql/data
#    healthcheck:
#      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
#      timeout: 45s
#      interval: 10s
#      retries: 10
#    restart: always
#
#
#  #----------------#
#
#  pgadmin:
#    container_name: pgadmin
#    image: dpage/pgadmin4
#    depends_on:
#      - postgres
#    ports:
#      - "${PGADMIN_PORT}:80"
#    environment:
#      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
#      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
#      PGADMIN_CONFIG_SERVER_MODE: 'False'
#    volumes:
#      - ./pgadmin:/root/.pgadmin
#    restart: unless-stopped

volumes:
  prometheus-data:
  loki-data:
  grafana-data:
#  postgres-db: