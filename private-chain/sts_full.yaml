---
apiVersion: v1
kind: Namespace
metadata:
  name: full
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: da-full
    chain-id: private
    environment: private
    network: da
    type: full
  name: da-full
  namespace: full
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  revisionHistoryLimit: 10
  serviceName: da-full
  selector:
    matchLabels:
      app: da-full
      chain-id: private
      environment: private
      network: da
      type: full
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: da-full
        chain-id: private
        environment: private
        network: da
        type: full
    spec:
      containers:
        - command:
            - /home/celestia/start.sh
          env:
            - name: GOLOG_LOG_FMT
              value: json
            #- name: CELESTIA_BOOTSTRAPPER
            #  value: "true"
            - name: CELESTIA_HOME
              value: /home/celestia
            - name: CELESTIA_BIN_FOLDER
              value: /bin
            - name: CELESTIA_CUSTOM
              value: "private:CF5C1DC1A332B26B393ADD03EA2519F5C7BF6207573C35349C5E22DD17751747"
            - name: SETUP_PATH
              value: /tmp/celestia-config
                #- name: TRUSTED_PEERS
                #  valueFrom:
                #    configMapKeyRef:
              #      key: TRUSTED_PEERS
              #      name: trusted-peers
          image: ghcr.io/celestiaorg/celestia-node:v0.11.0-rc3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 20
            successThreshold: 1
            tcpSocket:
              port: rest
            timeoutSeconds: 1
          name: da
          ports:
            - containerPort: 2121
              name: p2p
              protocol: TCP
            - containerPort: 6060
              name: something-1
              protocol: TCP
            - containerPort: 26658
              name: rpc
              protocol: TCP
            - containerPort: 26659
              name: rest
              protocol: TCP
            - containerPort: 8890
              name: libp2p-metrics
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: rest
            timeoutSeconds: 1
          resources:
            #limits:
            #  memory: 12Gi
            requests:
              cpu: "3"
              memory: 3Gi
          securityContext:
            runAsGroup: 10001
            runAsUser: 10001
          volumeMounts:
            #- mountPath: /home/celestia/config
            #  name: da-config
            #- mountPath: /home/celestia/data
            #  name: da-data
            #  subPath: data
            #- mountPath: /home/celestia/blocks
            #  name: da-data
            #  subPath: blocks
            #- mountPath: /home/celestia/index
            #  name: da-data
            #  subPath: index
            #- mountPath: /home/celestia/transients
            #  name: da-data
            #  subPath: transients
            #- mountPath: /home/celestia/keys
            #  name: da-keys
            - mountPath: /home/celestia/start.sh
              name: start
              subPath: start.sh
            - mountPath: /tmp/celestia-config
              name: shared
      #- command:
      #  - /otelcol-contrib
      #  - --config=/conf/otel-agent.yaml
      #  image: otel/opentelemetry-collector-contrib:0.71.0
      #  imagePullPolicy: IfNotPresent
      #  name: otel-agent
      #  ports:
      #  - containerPort: 8888
      #    name: prometheus-otel
      #    protocol: TCP
      #  - containerPort: 9090
      #    name: prometheus
      #    protocol: TCP
      #  resources:
      #    limits:
      #      memory: 200Mi
      #    requests:
      #      cpu: 100m
      #      memory: 100Mi
      #  terminationMessagePath: /dev/termination-log
      #  terminationMessagePolicy: File
      #  volumeMounts:
      #  - mountPath: /conf/otel-agent.yaml
      #    name: otel-agent
      #    subPath: otel-agent.yaml
      dnsPolicy: ClusterFirst
        #initContainers:
        #- command:
        #  #- /setup/setup.sh
        #  - /setup/setup.sh
        #  env:
        #  - name: CELESTIA_BOOTSTRAPPER
        #    value: "true"
        #  - name: CONSENSUS_NODE_SERVICE
        #    value: consensus-full
        #  - name: CONSENSUS_NAMEPACE
        #    valueFrom:
        #      fieldRef:
        #        apiVersion: v1
        #        fieldPath: metadata.labels['consensus-namespace']
        #  - name: SETUP_PATH
        #    value: /tmp/celestia-config
        #  image: alpine:3.18.0
        #  imagePullPolicy: IfNotPresent
        #  name: da-setup
        #  resources:
        #    limits:
        #      memory: 500Mi
        #    requests:
        #      cpu: 300m
        #      memory: 250Mi
        #  terminationMessagePath: /dev/termination-log
        #  terminationMessagePolicy: File
        #  volumeMounts:
        #  - mountPath: /tmp/celestia-config
        #    name: shared
        #  - mountPath: /setup/setup.sh
        #    name: setup
        #    subPath: setup.sh
        #restartPolicy: Always
        #schedulerName: default-scheduler
        #securityContext:
        #  fsGroup: 10001
        #  fsGroupChangePolicy: OnRootMismatch
        #    #serviceAccount: da-sa-bridge-1
      #    #serviceAccountName: da-sa-bridge-1
      #terminationGracePeriodSeconds: 30
      volumes:
        #- configMap:
        #    defaultMode: 420
        #    name: otel-agent-bridge-1-gb2ct8d928
        #  name: otel-agent
        #- name: da-config
        #  persistentVolumeClaim:
        #    claimName: da-config-bridge-1
        #- name: da-data
        #  persistentVolumeClaim:
        #    claimName: da-data-bridge-1
        #- name: da-keys
        #  persistentVolumeClaim:
        #    claimName: da-keys-bridge-1
        - configMap:
            defaultMode: 0777
            name: start-full
          name: start
        - configMap:
            defaultMode: 360
            name: setup-full
          name: setup
        - emptyDir: {}
          name: shared
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
---
apiVersion: v1
data:
  start.sh: |
    #!/bin/bash
    
    # $1 is the first argument passed to the script (input number).
    # $2 is the second argument passed to the script (string for if true).
    input_number="1480"
    second_argument="12D3KooWETdB6AxKeTfVU25T2F6CgUhTgMLQEeR2LE51emXpW2dN"
    
    # Set the timeout and the uri as per your requirements
    TIMEOUT=1
    uri='100.64.1.233'
    
    celestia full init --node.store=/home/celestia/ && \
    
    sed -i "s|High = 1000|High = 6000|g" /home/celestia/config.toml &&\
    sed -i "s|EnableBlackListing = false|EnableBlackListing = true|g" /home/celestia/config.toml &&\
    sed -i "s|TrustedHash = \"\"|TrustedHash = \"CF5C1DC1A332B26B393ADD03EA2519F5C7BF6207573C35349C5E22DD17751747\"|g" /home/celestia/config.toml &&\ # consensus first hash
    sed -i 's|TrustedPeers = \[]|TrustedPeers = \["/ip4/192.168.51.68/tcp/2121/p2p/12D3KooWE85QUJXWQr67zVeXx2y17y2NGDvLgDTxF12bkiscnvAa","/ip4/192.168.2.52/tcp/2121/p2p/12D3KooWEMtFWdcbQv61g2KKtyWjGVW1eDB8Ro3fjAMkcrKmf5Lu"]|g' /home/celestia/config.toml &&\
    cat /home/celestia/config.toml &&\
    # Execute the command before starting the loop.
    celestia full start --log.level DEBUG --node.store=/home/celestia/ --gateway --metrics --metrics.tls=false --metrics.endpoint=51.159.206.246:4318 --p2p.metrics --p2p.network=private  --metrics.endpoint=otel.celestia.observer:4318 --pyroscope --pyroscope.tracing --pyroscope.endpoint http://pyroscope.pyroscope.svc.cluster.local:4040
   
    # Sleep for 10 seconds.
    sleep 10
    
    # Store the bearer token into an environment variable.
    export CELESTIA_NODE_AUTH_TOKEN=$(celestia full auth admin --node.store=/home/celestia | tail -n 1)
    # For loop (replace with your own loop conditions).
    #for i in {1..20}
    #do
    #  echo "BEGIN THE LOOP"
    #  # Fetch the data from the URL and extract the block height.
    #  block_height=$(wget --timeout=1 -q -O - 100.64.1.233:26657/block | \grep -o '"height":"[^"]*"' | \sed 's/"height":"\([^"]*\)"/\1/' | \head -1)
    #
    #  # Compare the block_height to the input_number.
    #  if [ "$block_height" -eq "$input_number" ]; then
    #    # If the comparison is true, execute other commands here.
    #    echo "The block height equals the input number."
    #
    #    # Execute the second command with the second argument from the script.
    #    celestia rpc p2p BlockPeer $second_argument
    #
    #  else
    #    echo "The block height does not equal the input number."
    #  fi
    # echo "ANOTHER ITERATION"
    #  # Sleep for 10 seconds.
    #  sleep 1
    #done

#  start.sh: |
#    #!/bin/bash
#    celestia full init --node.store=/home/celestia/ && \
#    sed -i "s|TrustedHash = \"\"|TrustedHash = \"20AFC7522FA0CB3F22ACC98AEB9A842393EF93D0EAD87992B3018424F388C69D\"|g" /home/celestia/config.toml
#    sed -i 's|TrustedPeers = \[]|TrustedPeers = \["/ip4/100.64.3.206/tcp/2121/p2p/12D3KooWCokoUzyz47c2GNbxKFzmnaAC1VkUeJ68HxBCGiy4YeJG"]|g' /home/celestia/config.toml
#    cat /home/celestia/config.toml && \
#    celestia full start --node.store=/home/celestia/ --gateway --metrics --metrics.tls=false --p2p.metrics --p2p.network=private
kind: ConfigMap
metadata:
  labels:
    app: da-full
    chain-id: full
    type: full
  name: start-full
  namespace: full
